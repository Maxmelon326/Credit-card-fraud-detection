# -*- coding: utf-8 -*-
"""Streamlit App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U1_7MjOozwQF1-b9803vU-YZt5yC6gKK
"""

import streamlit as st
import pandas as pd
import joblib
from lightgbm import LGBMClassifier

# Load models
new_user_model = joblib.load("new_user_model.pkl")
existing_user_model = joblib.load("existing_user_model.pkl")

# Load datasets
train_data = pd.read_csv("train.csv")  # Assuming this contains existing user info

st.title("üè¶ FinTech Credit Risk Assessment Demo")

# Step 1: Select user type
user_type = st.radio("Are you a new or existing user?", ["New User", "Existing User"])

# Step 2A: New user inputs
if user_type == "New User":
    st.subheader("üìù Please enter your personal information")

    age = st.slider("Age", 18, 100, 30)
    net_income = st.number_input("Net Yearly Income", min_value=0.0)
    days_employed = st.number_input("No. of Days Employed", min_value=0.0)
    total_family = st.slider("Family Members", 0, 10, 1)
    owns_house = st.selectbox("Owns House?", ["Yes", "No"])
    occupation_type = st.selectbox("Occupation Type", ["Laborers", "Core staff", "Managers", "Other"])

    # Construct input data
    user_input = pd.DataFrame({
        "age": [age],
        "net_yearly_income": [net_income],
        "no_of_days_employed": [days_employed],
        "total_family_members": [total_family],
        "owns_house": [1 if owns_house == "Yes" else 0],
        "occupation_type": [occupation_type]
    })

    # TO DO: Apply same preprocessing steps here (log transform, label encoding etc.)
    # user_input_transformed = preprocess_new_user(user_input)

    if st.button("Evaluate Credit"):
        # prob = new_user_model.predict_proba(user_input_transformed)[0][1]
        prob = 0.27  # ‚Üê Replace with real prediction

        st.metric("Predicted Default Probability", f"{prob:.2%}")
        if prob < 0.1: # You can set the rejection rate here
            st.success("‚úÖ Credit Approved")
        else:
            st.error("‚ùå Credit Rejected")

# Step 2B: Existing user by ID
elif user_type == "Existing User":
    st.subheader("üîç Enter your Customer ID")
    input_id = st.text_input("Customer ID (e.g., CST_115179)")

    if st.button("Search and Evaluate"):
        if input_id in train_data["customer_id"].values:
            user_row = train_data[train_data["customer_id"] == input_id]
            X_existing = user_row[['age', 'credit_score', 'credit_limit', 'credit_limit_used(%)',
                                   'yearly_debt_payments', 'prev_defaults', 'default_in_last_6months']]

            # TO DO: apply preprocessing here (label encoding, fill NA, etc.)
            # X_existing = preprocess_existing_user(X_existing)

            # prob = existing_user_model.predict_proba(X_existing)[0][1]
            prob = 0.12  # ‚Üê Replace with real prediction

            st.metric("Predicted Default Probability", f"{prob:.2%}")
            if prob < 0.2: # You can set the rejection rate here
                st.success("‚úÖ Credit Approved")
            else:
                st.error("‚ùå Credit Rejected")
        else:
            st.warning("‚ùó Customer ID not found. Please check and try again.")